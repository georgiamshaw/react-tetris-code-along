{"version":3,"sources":["components/styles/StyledTetris.js","components/styles/StyledStage.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/Stage.js","components/Display.js","components/StartButton.js","components/Tetris.js","gameHelpers.js","App.js","serviceWorker.js","index.js","img/bg.png"],"names":["StyledTetrisWrapper","styled","div","bgImage","StyledTetris","StyledStage","StyledCell","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","Cell","Stage","stage","width","length","height","map","row","cell","x","key","Display","gameOver","text","StartButton","callback","Tetris","Array","from","fill","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"8qBAGO,IAAMA,EAAsBC,IAAOC,IAAV,IAGdC,KAKLC,EAAeH,IAAOC,IAAV,K,yVCTlB,IAAMG,EAAcJ,IAAOC,IAAV,K,oRCAjB,IAAMI,EAAaL,IAAOC,IAAV,IAEH,SAAAK,GAAK,OAAIA,EAAMC,OACxB,SAAAD,GAAK,OAAoB,IAAfA,EAAME,KAAa,YAAc,aACzB,SAAAF,GAAK,OAAIA,EAAMC,OAChB,SAAAD,GAAK,OAAIA,EAAMC,OACjB,SAAAD,GAAK,OAAIA,EAAMC,OACd,SAAAD,GAAK,OAAIA,EAAMC,QCT7BE,EAAa,CACxBC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKJ,MAAO,WAC1BK,EAAG,CACDD,MAAO,CACL,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEdJ,MAAO,gBAETM,EAAG,CACDF,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,IAEbJ,MAAO,eAETO,EAAG,CACDH,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,MAEXJ,MAAO,gBAETQ,EAAG,CACDJ,MAAO,CACL,CAAC,IAAK,KACN,CAAC,IAAK,MAERJ,MAAO,gBAETS,EAAG,CACDL,MAAO,CACL,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,EAAG,IAETJ,MAAO,eAETU,EAAG,CACDN,MAAO,CACL,CAAC,EAAG,EAAG,GACP,CAAC,IAAK,IAAK,KACX,CAAC,EAAG,IAAK,IAEXJ,MAAO,gBAETW,EAAG,CACDP,MAAO,CACL,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IAETJ,MAAO,gBChDIY,EAJF,SAAC,GAAD,EAAGX,KAAH,OACX,kBAACH,EAAD,CAAYG,KAAM,IAAKD,MAAOE,EAAU,EAAMF,OAA9C,SCOaa,EAND,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,kBAACjB,EAAD,CAAakB,MAAOD,EAAM,GAAGE,OAAQC,OAAQH,EAAME,QACpDF,EAAMI,IAAI,SAAAC,GAAG,OAAIA,EAAID,IAAI,SAACE,EAAMC,GAAP,OAAa,kBAAC,EAAD,CAAMC,IAAKD,EAAGpB,KAAMmB,EAAK,WCFjDG,EAJC,SAAC,GAAD,EAAGC,SAAH,IAAaC,EAAb,EAAaA,KAAb,OACd,6BAAMA,ICGOC,EAJK,SAAC,GAAD,EAAGC,SAAH,OAClB,4CCuBaC,EAlBA,WACb,OACE,kBAACpC,EAAD,KACE,kBAACI,EAAD,KACE,kBAAC,EAAD,CAAOkB,MCRbe,MAAMC,KAAKD,MAHe,IAGM,kBAClC,IAAIA,MALuB,IAKJE,KAAK,CAAC,EAAG,cDOQ,IAChC,+BACE,6BACE,kBAAC,EAAD,CAASN,KAAK,UACd,kBAAC,EAAD,CAASA,KAAK,SACd,kBAAC,EAAD,CAASA,KAAK,WACT,IACP,kBAAC,EAAD,OACO,KACK,MEZPO,EANH,kBACV,yBAAKC,UAAU,OACf,kBAAC,EAAD,QCOkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.afb5a97c.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\nwidth: 100vw;\nheight: 100vh;\nbackground: url(${bgImage}) #000;\nbackground-size: cover;\noverflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\ndisplay: flex;\nalign-items: flex-start;\npadding: 40px;\nmargin: 0 auto;\nmax-width: 900px;\n\naside {\n  width: 100%;\n  max-width: 200px;\n  display: block;\n  padding: 0 20px;\n}\n`\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\ndisplay: grid;\ngrid-template-rows: repeat(\n  $ {props => props.height},\n  calc(25vw / $ {props = props.width})\n);\ngrid-template-columns: repeat($ {props => props.width}, 1fr);\ngrid-gap: 1px;\nborder: 2px solid #333;\nwidth: 100%;\nmax-width: 25vw;\nbackground: #111;\n`;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n width: auto;\n background: rgba(${props => props.color}, 0.7);\n border: ${props => (props.type === 0 ? '0px solid' : '4px solid')}\n border-bottom-color: rgba(${props => props.color}, 0.1);\n border-right-color: rgba(${props => props.color}, 1);\n border-top-color: rgba(${props => props.color}, 1);\n border-left-color: rgba(${props => props.color}, 0.3);\n`\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0'},\n  I: {\n    shape: [\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0]\n    ],\n    color: '80, 227, 230',\n  },\n  J: {\n    shape: [\n      [0, 'J', 0],\n      [0, 'J', 0],\n      ['J', 'J', 0]\n    ],\n    color: '36, 95, 223',\n  },\n  L: {\n    shape: [\n      [0, 'L', 0],\n      [0, 'L', 0],\n      [0, 'L', 'L']\n    ],\n    color: '223, 173, 36',\n  },\n  O: {\n    shape: [\n      ['O', 'O'],\n      ['O', 'O']\n    ],\n    color: '223, 217, 36',\n  },\n  S: {\n    shape: [\n      [0, 'S', 'S'],\n      ['S', 'S', 0],\n      [0, 0, 0]\n    ],\n    color: '48, 211, 56',\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      ['T', 'T', 'T'],\n      [0, 'T', 0]\n    ],\n    color: '132, 61, 198',\n  },\n  Z: {\n    shape: [\n      ['Z', 'Z', 0],\n      [0, 'Z', 'Z'],\n      [0, 0, 0]\n    ],\n    color: '227, 78, 78',\n  }\n}\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n  tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n}\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n  <StyledCell type={'L'} color={TETROMINOS['L'].color}>cell</StyledCell>\n)\n\nexport default Cell;\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\nimport Cell from './Cell';\n// map through the stage and you get a row, which is also an array\n// and then you map through the row and get the cell\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n{stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]}/>))}\n  </StyledStage>\n)\n\nexport default Stage;\n","import React from 'react';\n\nconst Display = ({ gameOver, text }) => (\n  <div>{text}</div>\n)\n\nexport default Display;\n","import React from 'react';\n\nconst StartButton = ({ callback }) => (\n  <div>Start Game</div>\n)\n\nexport default StartButton;\n","import React from \"react\";\nimport { createStage } from \"../gameHelpers\";\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n// components\nimport Stage from \"./Stage\";\nimport Display from \"./Display\";\nimport StartButton from \"./StartButton\";\n\nconst Tetris = () => {\n  return (\n    <StyledTetrisWrapper>\n      <StyledTetris>\n        <Stage stage={createStage()} />{\" \"}\n        <aside>\n          <div>\n            <Display text=\"Score\" />\n            <Display text=\"Rows\" />\n            <Display text=\"Level\" />\n          </div>{\" \"}\n          <StartButton />\n        </aside>{\" \"}\n      </StyledTetris>{\" \"}\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\nnew Array(STAGE_WIDTH).fill([0, 'clear'])\n)\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n  <Tetris/>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}